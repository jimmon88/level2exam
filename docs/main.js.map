{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/shared/services/quiz.service.ts","./src/app/trivia-answers/trivia-answers.component.ts","./src/app/trivia-answers/trivia-answers.component.html","./src/app/trivia/trivia.component.ts","./src/app/trivia/trivia.component.html","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TriviaComponent } from './trivia/trivia.component';\nimport { TriviaAnswersComponent } from './trivia-answers/trivia-answers.component';\n\nconst routes: Routes = [\n  { path: 'trivia', component: TriviaComponent },\n  { path: 'trivia-results', component: TriviaAnswersComponent },\n  { path: '', redirectTo: '/trivia', pathMatch: 'full' }, // Default route\n  { path: '**', redirectTo: '/trivia', pathMatch: 'full' }, // Default route\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'quizApp';\n}\n","<router-outlet></router-outlet>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TriviaComponent } from './trivia/trivia.component';\nimport { TriviaAnswersComponent } from './trivia-answers/trivia-answers.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { from } from 'rxjs';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [AppComponent, TriviaComponent, TriviaAnswersComponent],\n  imports: [BrowserModule, AppRoutingModule, HttpClientModule, FormsModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, map, tap } from 'rxjs';\nimport { Category, CategoryWrapper } from '../models/category';\nimport { Question, QuestionWrapper } from '../models/question';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuizService {\n  submittedAnsWithQns!: Question[];\n\n  constructor(private http: HttpClient) {}\n\n  // Fetch available categories from the Open Trivia Database API\n  getCategories(): Observable<Category[]> {\n    return this.http\n      .get<CategoryWrapper>('https://opentdb.com/api_category.php')\n      .pipe(map((res) => res.trivia_categories));\n  }\n\n  // Fetch questions from the Open Trivia Database API\n  getQuizQuestions(\n    amount: number,\n    category: number,\n    difficulty: string\n  ): Observable<Question[]> {\n    return this.http\n      .get<QuestionWrapper>(\n        `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=multiple`\n      )\n      .pipe(map((res) => res.results));\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { QuizService } from '../shared/services/quiz.service';\nimport { Router } from '@angular/router';\nimport { Question } from '../shared/models/question';\n\n@Component({\n  selector: 'app-trivia-answers',\n  templateUrl: './trivia-answers.component.html',\n  styleUrls: ['./trivia-answers.component.scss'],\n})\nexport class TriviaAnswersComponent implements OnInit {\n  submittedAnsWithQns!: Question[];\n  totalCorrectAnsCount: number = 0;\n  constructor(private quizService: QuizService, private router: Router) {}\n\n  ngOnInit() {\n    // fetching quiz results from the QuizService\n    this.submittedAnsWithQns = this.quizService.submittedAnsWithQns;\n    if (!this.submittedAnsWithQns) {\n      this.router.navigate(['/trivia']);\n    }\n    this.submittedAnsWithQns.map((question) => {\n      if (question.isCorrect) this.totalCorrectAnsCount++;\n      question.shuffled_answers_button_color = question.shuffled_answers.map(\n        (ans, index) => {\n          return index === question.correct_answer_index\n            ? 'green'\n            : index === question.selected_answer_index\n            ? 'red'\n            : 'normal';\n        }\n      );\n    });\n    console.log(this.submittedAnsWithQns);\n  }\n}\n","<div class=\"container\">\n    <h2>Quiz Results</h2>\n    <p>Your Quiz Results:</p>\n    <div *ngFor=\"let question of submittedAnsWithQns; let qnIndex = index\">\n        <p> {{ question.question }}</p>\n        <div *ngFor=\"let answer of question.shuffled_answers; let ansIndex = index\">\n            <button [ngClass]=\"question.shuffled_answers_button_color[ansIndex]\">{{ answer }}</button>\n        </div>\n    </div>\n    <div [ngClass]=\"{'red':totalCorrectAnsCount<=1,'yellow':totalCorrectAnsCount}\">\n        <p>Your Scored: {{totalCorrectAnsCount}}</p>\n    </div>\n\n\n    <button routerLink='/registration'>Create Another Quiz</button>\n\n</div>","import { Component } from '@angular/core';\nimport { QuizService } from '../shared/services/quiz.service';\nimport { Category } from '../shared/models/category';\nimport { Question } from '../shared/models/question';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-trivia',\n  templateUrl: './trivia.component.html',\n  styleUrls: ['./trivia.component.scss'],\n})\nexport class TriviaComponent {\n  categories$!: Observable<Category[]>;\n  selectedCategory!: number;\n  selectedDifficulty: string = 'easy';\n  questions: Question[] = [];\n  isQuizStarted: boolean = false;\n  selectedAnswers: number[] = [];\n  isQuizCompleted: boolean = false;\n\n  constructor(private quizService: QuizService, private router: Router) {}\n\n  ngOnInit() {\n    this.categories$ = this.quizService.getCategories();\n  }\n\n  // Create a new quiz based on selected category and difficulty\n  createQuiz() {\n    this.quizService\n      .getQuizQuestions(5, this.selectedCategory, this.selectedDifficulty)\n      .subscribe((data) => {\n        this.questions = data?.map((question: Question) => {\n          // Changing answer orders\n          const answers = this.changeAnswerOrder([\n            ...question.incorrect_answers,\n            question.correct_answer,\n          ]);\n          return {\n            ...question,\n            shuffled_answers: answers,\n            correct_answer_index: answers.findIndex(\n              (ans) => ans === question.correct_answer\n            ),\n          };\n        });\n        this.isQuizStarted = true;\n      });\n  }\n\n  // Changing answer orders\n  changeAnswerOrder(answers: string[]) {\n    for (let i = answers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [answers[i], answers[j]] = [answers[j], answers[i]];\n    }\n    return answers;\n  }\n\n  // Method for handling answer selection for question\n  onAnswerSelect(questionIndex: number, answerIndex: number) {\n    this.questions[questionIndex].selected_answer_index = answerIndex;\n    this.questions[questionIndex].isCorrect =\n      this.questions[questionIndex].shuffled_answers.indexOf(\n        this.questions[questionIndex].correct_answer\n      ) === answerIndex;\n    this.isQuizCompleted = this.questions.every(\n      (qn) => qn.selected_answer_index !== undefined\n    );\n  }\n\n  // Method to handle submit event of quiz\n  submitQuiz() {\n    this.quizService.submittedAnsWithQns = this.questions;\n    this.router.navigate(['/trivia-results']);\n  }\n}\n","<div>\n   <h2>Quiz Maker</h2>\n    <!-- Category and difficulty dropdowns -->\n    <select id=\"categorySelect\" [(ngModel)]=\"selectedCategory\">\n      <option *ngFor=\"let category of categories$|async\" [value]=\"category.id\">{{ category.name }}</option>\n    </select>\n    <select id=\"difficultySelect\" [(ngModel)]=\"selectedDifficulty\">\n      <option value=\"easy\">Easy</option>\n      <option value=\"medium\">Medium</option>\n      <option value=\"hard\">Hard</option>\n    </select>\n    <button id=\"createBtn\" (click)=\"createQuiz()\">Create Quiz</button>\n  </div>\n  \n  <!-- questions and answer buttons -->\n  <div *ngIf=\"isQuizStarted\">\n    <div *ngFor=\"let question of questions; let qnIndex = index\">\n      <p> {{ question.question }}</p>\n      <div *ngFor=\"let answer of question.shuffled_answers; let ansIndex = index\">\n        <button [ngClass]=\"{'selected': question.selected_answer_index === ansIndex}\" (click)=\"onAnswerSelect(qnIndex, ansIndex)\">{{ answer }}</button>\n      </div>\n    </div>\n  </div>\n  <!-- questions and answer buttons ends here-->\n  \n  <!-- submit button section -->\n  <button *ngIf=\"isQuizStarted && isQuizCompleted\" (click)=\"submitQuiz()\" >Submit Quiz</button>\n   <!-- submit button section ends here-->","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["RouterModule","TriviaComponent","TriviaAnswersComponent","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","i1","exports","AppComponent","constructor","title","selectors","decls","vars","template","AppComponent_Template","rf","ctx","i0","ɵɵelement","BrowserModule","HttpClientModule","FormsModule","AppModule","bootstrap","declarations","map","QuizService","http","getCategories","get","pipe","res","trivia_categories","getQuizQuestions","amount","category","difficulty","results","ɵɵinject","HttpClient","factory","ɵfac","providedIn","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","question_r1","shuffled_answers_button_color","ansIndex_r5","ɵɵtextInterpolate","answer_r4","ɵɵtemplate","TriviaAnswersComponent_div_5_div_3_Template","ɵɵtextInterpolate1","question","shuffled_answers","quizService","router","totalCorrectAnsCount","ngOnInit","submittedAnsWithQns","navigate","isCorrect","ans","index","correct_answer_index","selected_answer_index","console","log","ɵɵdirectiveInject","i2","Router","consts","TriviaAnswersComponent_Template","TriviaAnswersComponent_div_5_Template","ɵɵpureFunction2","_c0","category_r3","id","name","ɵɵlistener","TriviaComponent_div_15_div_1_div_3_Template_button_click_1_listener","restoredCtx","ɵɵrestoreView","_r12","ansIndex_r9","qnIndex_r6","ɵɵnextContext","ctx_r10","ɵɵresetView","onAnswerSelect","ɵɵpureFunction1","question_r5","answer_r8","TriviaComponent_div_15_div_1_div_3_Template","TriviaComponent_div_15_div_1_Template","ctx_r1","questions","TriviaComponent_button_16_Template_button_click_0_listener","_r15","ctx_r14","submitQuiz","selectedDifficulty","isQuizStarted","selectedAnswers","isQuizCompleted","categories$","createQuiz","selectedCategory","subscribe","data","answers","changeAnswerOrder","incorrect_answers","correct_answer","findIndex","i","length","j","Math","floor","random","questionIndex","answerIndex","indexOf","every","qn","undefined","TriviaComponent_Template","TriviaComponent_Template_select_ngModelChange_3_listener","$event","TriviaComponent_option_4_Template","TriviaComponent_Template_select_ngModelChange_6_listener","TriviaComponent_Template_button_click_13_listener","TriviaComponent_div_15_Template","TriviaComponent_button_16_Template","ɵɵpipeBind1","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch","err","error"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}