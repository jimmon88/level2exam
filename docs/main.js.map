{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/shared/services/quiz.service.ts","./src/app/trivia-answers/trivia-answers.component.ts","./src/app/trivia-answers/trivia-answers.component.html","./src/app/trivia/trivia.component.ts","./src/app/trivia/trivia.component.html","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { TriviaComponent } from './trivia/trivia.component';\nimport { TriviaAnswersComponent } from './trivia-answers/trivia-answers.component';\n\nconst routes: Routes = [\n  { path: 'trivia', component: TriviaComponent },\n  { path: 'trivia-results', component: TriviaAnswersComponent },\n  { path: '', redirectTo: '/quiz', pathMatch: 'full' }, // Default route\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'quizApp';\n}\n","<router-outlet></router-outlet>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { TriviaComponent } from './trivia/trivia.component';\nimport { TriviaAnswersComponent } from './trivia-answers/trivia-answers.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { from } from 'rxjs';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [AppComponent, TriviaComponent, TriviaAnswersComponent],\n  imports: [BrowserModule, AppRoutingModule, HttpClientModule, FormsModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, map, tap } from 'rxjs';\nimport { Category, CategoryApiResponse } from '../models/category';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuizService {\n  constructor(private http: HttpClient) {}\n\n  // Fetch available categories from the Open Trivia Database API\n  getCategories(): Observable<Category[]> {\n    return this.http\n      .get<CategoryApiResponse>('https://opentdb.com/api_category.php')\n      .pipe(map(res => res.trivia_categories));\n  }\n\n  // Fetch questions from the Open Trivia Database API\n  getQuizQuestions(\n    amount: number,\n    category: number,\n    difficulty: string\n  ): Observable<any> {\n    // const params = new URLSearchParams({\n    //   amount: amount.toString(),\n    //   category: category.toString(),\n    //   difficulty: difficulty,\n    //   type: 'multiple',\n    // });\n\n    // const headers = new HttpHeaders({\n    //   'Content-Type': 'application/x-www-form-urlencoded',\n    // });\n\n    return this.http.get(\n      `https://opentdb.com/api.php?amount=${amount}&category=${category}&difficulty=${difficulty}&type=multiple`\n    );\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-trivia-answers',\n  templateUrl: './trivia-answers.component.html',\n  styleUrls: ['./trivia-answers.component.scss']\n})\nexport class TriviaAnswersComponent {\n\n}\n","<p>trivia-answers works!</p>\n","import { Component } from '@angular/core';\nimport { QuizService } from '../shared/services/quiz.service';\nimport { Category } from '../shared/models/category';\nimport { Question } from '../shared/models/question';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-trivia',\n  templateUrl: './trivia.component.html',\n  styleUrls: ['./trivia.component.scss'],\n})\nexport class TriviaComponent {\n  categories$!: Observable<Category[]> ;\n  selectedCategory!: number;\n  selectedDifficulty: string = 'easy';\n  questions: Question[] = [];\n  isQuizStarted: boolean= false;\n  selectedAnswers: number[] = [];\n\n  constructor(private quizService: QuizService) {}\n\n  ngOnInit() {\n    // Fetch categories from the API\n    // this.quizService.getCategories().subscribe((categories: Category[]) => {\n    //   this.categories = categories;\n    // });\n    this.categories$= this.quizService.getCategories();\n  }\n\n  // Create a new quiz based on selected category and difficulty\n  createQuiz() {\n    this.quizService\n      .getQuizQuestions(5, this.selectedCategory, this.selectedDifficulty)\n      .subscribe((data) => {\n        this.questions = data?.results.map((question: Question) => {\n          // Changing answer orders\n          const answers = this.changeAnswerOrder([\n            ...question.incorrect_answers,\n            question.correct_answer,\n          ]);\n          return {\n            question: question.question,\n            correct_answer: question.correct_answer,\n            shuffled_answers: answers,\n          };\n        });\n        this.isQuizStarted = true;\n      });\n  }\n\n  // Changing answer orders\n  changeAnswerOrder(answers: string[]) {\n    for (let i = answers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [answers[i], answers[j]] = [answers[j], answers[i]];\n    }\n    return answers;\n  }\n\n    // Method for handling answer selection for question\n    onAnswerSelect(questionIndex: number, answerIndex: number) {\n      this.selectedAnswers[questionIndex] = answerIndex;\n    }\n  \n    // Check if the quiz is completed\n    isQuizCompleted(): boolean {\n      return this.selectedAnswers.length === this.questions.length;\n    }\n}\n","<div>\n   <h2>Quiz Maker App</h2>\n    <!-- Category and difficulty dropdowns -->\n    <select id=\"categorySelect\" [(ngModel)]=\"selectedCategory\">\n      <option *ngFor=\"let category of categories$|async\" [value]=\"category.id\">{{ category.name }}</option>\n    </select>\n    <select id=\"difficultySelect\" [(ngModel)]=\"selectedDifficulty\">\n      <option value=\"easy\">Easy</option>\n      <option value=\"medium\">Medium</option>\n      <option value=\"hard\">Hard</option>\n    </select>\n    <button id=\"createBtn\" (click)=\"createQuiz()\">Create Quiz</button>\n  </div>\n  \n  <!-- Display questions and answer buttons -->\n  <div *ngIf=\"isQuizStarted\">\n    <div *ngFor=\"let question of questions; let i = index\">\n      <p>{{ i + 1 }}. {{ question.question }}</p>\n      <div *ngFor=\"let answer of question.shuffled_answers; let j = index\">\n        <button [ngClass]=\"{'selected': selectedAnswers[i] === j}\" (click)=\"onAnswerSelect(i, j)\">{{ answer }}</button>\n      </div>\n    </div>\n  </div>\n  \n  <!-- Display submit button when all questions are answered -->\n  <button *ngIf=\"isQuizStarted && isQuizCompleted()\" >Submit Quiz</button>","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["RouterModule","TriviaComponent","TriviaAnswersComponent","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","i1","exports","AppComponent","constructor","title","selectors","decls","vars","template","AppComponent_Template","rf","ctx","i0","ɵɵelement","BrowserModule","HttpClientModule","FormsModule","AppModule","bootstrap","declarations","map","QuizService","http","getCategories","get","pipe","res","trivia_categories","getQuizQuestions","amount","category","difficulty","ɵɵinject","HttpClient","factory","ɵfac","providedIn","TriviaAnswersComponent_Template","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","category_r3","id","ɵɵadvance","ɵɵtextInterpolate","name","ɵɵlistener","TriviaComponent_div_15_div_1_div_3_Template_button_click_1_listener","restoredCtx","ɵɵrestoreView","_r12","j_r9","index","i_r6","ɵɵnextContext","ctx_r10","ɵɵresetView","onAnswerSelect","ɵɵpureFunction1","_c0","ctx_r7","selectedAnswers","answer_r8","ɵɵtemplate","TriviaComponent_div_15_div_1_div_3_Template","ɵɵtextInterpolate2","question_r5","question","shuffled_answers","TriviaComponent_div_15_div_1_Template","ctx_r1","questions","quizService","selectedDifficulty","isQuizStarted","ngOnInit","categories$","createQuiz","selectedCategory","subscribe","data","results","answers","changeAnswerOrder","incorrect_answers","correct_answer","i","length","j","Math","floor","random","questionIndex","answerIndex","isQuizCompleted","ɵɵdirectiveInject","consts","TriviaComponent_Template","TriviaComponent_Template_select_ngModelChange_3_listener","$event","TriviaComponent_option_4_Template","TriviaComponent_Template_select_ngModelChange_6_listener","TriviaComponent_Template_button_click_13_listener","TriviaComponent_div_15_Template","TriviaComponent_button_16_Template","ɵɵpipeBind1","__NgCli_bootstrap_1","platformBrowser","bootstrapModule","catch","err","console","error"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}